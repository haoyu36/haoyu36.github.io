<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>haoyu blog</title>
    <link>http://120.79.76.172:8381/</link>
    <description>Recent content on haoyu blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 26 Oct 2022 15:00:55 +0000</lastBuildDate><atom:link href="http://120.79.76.172:8381/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python代码质量</title>
      <link>http://120.79.76.172:8381/post/python%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/</link>
      <pubDate>Wed, 26 Oct 2022 15:00:55 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/python%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/</guid>
      <description>代码质量 [TOC]
相关文档：
编码质量 概述 Pythonic 就是充分利用 Python 语言特性，写出简洁优美的代码
Python 之禅 import this 是 Python 的一个彩蛋，在交互式解释器中输入就会显示。Python 之禅体现了 Python 的设计哲学，对于编程有很强的指导意义</description>
    </item>
    
    <item>
      <title>安全</title>
      <link>http://120.79.76.172:8381/post/%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sat, 02 Oct 2021 15:40:00 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/%E5%AE%89%E5%85%A8/</guid>
      <description>安全 [TOC]
在安全领域，越简单的东西，安全风险越低；越复杂的东西，安全风险越高
一：概述 其实对于安全来说，最大的风险是人的风险，即内部管理的风险 什么是零信任 有哪些攻击手段，如何避免 如何建立安全运维体系 1.1 零信任 所谓零信任，即是在一切（人、设备、网络、资源和环境等等）都不可信的前提下支持和保障业务的运行和发展，或者可以说，零信任产品和方案的目标不是保证可信，而是接纳、拥抱不可信</description>
    </item>
    
    <item>
      <title>mysql基础</title>
      <link>http://120.79.76.172:8381/post/mysql%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/mysql%E5%9F%BA%E7%A1%80/</guid>
      <description>基础 [TOC]
一：数据库 1.1 MySQL 引擎 存储引擎指表的类型，决定了表在计算机中的存储方式。MySQL 默认存储引擎为 InnoDB，支持事务、原子操作、回滚等等。常见的存储引擎 InnoDB 和 MyISAM。如果系统读多写少，并发不高，对原子性要求低，选择 MyISAM；如果系统读少写多，尤其是并发写入高的时候，首选 InnoDB</description>
    </item>
    
    <item>
      <title>python列表与元组</title>
      <link>http://120.79.76.172:8381/post/python%E5%88%97%E8%A1%A8%E4%B8%8E%E5%85%83%E7%BB%84/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/python%E5%88%97%E8%A1%A8%E4%B8%8E%E5%85%83%E7%BB%84/</guid>
      <description>列表与元祖 [TOC]
列表是 Python 内置的一种数据类型，是一种有序的集合，包含 0 个或多个对象引用的有序序列，没有长度限制，可自由增删元素，使用灵活
列表 概述 列表中不同的元素类型可以相同，也可以不同，还可以是其他数据结构。列表支持：索引，分片，加，乘，最大最小值，判定成员资格，计算长度，迭代等等</description>
    </item>
    
    <item>
      <title>python基础</title>
      <link>http://120.79.76.172:8381/post/python%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/python%E5%9F%BA%E7%A1%80/</guid>
      <description>基础 [TOC]
概述 Python 定义 Python 是一种解释型、动态、面向对象的编程语言
解释型 Python 是一门解释型语言，即在运行之前不需要编译（其他解释型语言 PHP 和 Ruby）</description>
    </item>
    
    <item>
      <title>python字典与集合</title>
      <link>http://120.79.76.172:8381/post/python%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/python%E5%AD%97%E5%85%B8%E4%B8%8E%E9%9B%86%E5%90%88/</guid>
      <description>字典与集合 [TOC]
Python 基本是运行在字典上面的，module 是一个字典，global 是一个字典。优化了字典，就优化了 Python
字典 概述 字典是内置类型中唯一的映射 (mapping) 结构，基于哈希表存储键值对数据。模块的命名空间，实例的属性和函数的关键字参数都使用到了字典，标准库中所有映射类型都是利用 dict 实现的</description>
    </item>
    
    <item>
      <title>python面向对象</title>
      <link>http://120.79.76.172:8381/post/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>面向对象 本文主要说明面向对象在 python 中的实现，有关面向对象的知识详见 06-面向对象
[TOC]
面向对象 In python everything is an object.</description>
    </item>
    
    <item>
      <title>redis基础</title>
      <link>http://120.79.76.172:8381/post/redis%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/redis%E5%9F%BA%E7%A1%80/</guid>
      <description>基础 [TOC]
一：基础 1.1 概述 Redis 是一种速度非常快的键值（Key-Value）数据库，数据是存储在内存中的，并通过异步的方式将数据写入磁盘
使用 Redis 只能通过键来查询值，读写效率非常高。键的类型只能为字符串，值支持五种数据类型：字符串、列表、散列表、集合、有序集合</description>
    </item>
    
    <item>
      <title>凯撒密码</title>
      <link>http://120.79.76.172:8381/post/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/</guid>
      <description>凯撒密码 一：概述 凯撒密码是已知最早，最简单的密码之一。通过替换字母完成加密，每个字母由字母表中其后特定位数的字母代替。如偏移量为1，则 A 变为 B，B 变为 C
凯撒密码的关键是偏移量
1 2 3 # 偏移量为 1 明文：i am iron man 密文：j bn jspo nbo 二：破解 暴力破解：由于加密的密钥一共就0-25之间的数字，所以可以穷举所有的可能</description>
    </item>
    
    <item>
      <title>垃圾回收</title>
      <link>http://120.79.76.172:8381/post/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>垃圾回收 Garbage Collection A way for a program to automatically release memory when the object taking up that space is no longer in use</description>
    </item>
    
    <item>
      <title>安全运维体系</title>
      <link>http://120.79.76.172:8381/post/%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/%E5%AE%89%E5%85%A8%E8%BF%90%E7%BB%B4%E4%BD%93%E7%B3%BB/</guid>
      <description>安全运维体系 [TOC]
一：概述 云端安全运维体系包括两个维度：身份访问控制、安全监控运营
目标 保证用户对资源的合理访问 限制乃至阻止用户对资源的不合理访问（权限不足、非业务需要、操作不当等等） 保证资源不因用户行为而受到侵害 保证用户不因资源问题而受到侵害 职责分离 对运维权限分角色进行职责分离，防止权限滥用和审计失效 运维和审计职责分离， 由安全团队负责审计 数据库管理员和系统管理员职责分离 二：人员管理 2.</description>
    </item>
    
    <item>
      <title>攻击手段</title>
      <link>http://120.79.76.172:8381/post/%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5/</guid>
      <description>攻击手段 [TOC]
一：概述 常见的安全漏洞包括密码漏洞、操作系统相关漏洞、中间件程序相关漏洞、开放端口相关漏洞、数据传送相关漏洞、局域网/广域网相关设备漏洞等
二：系统攻击 针对操作系统 OS 级别的攻击，通过找到操作系统的漏洞来达到入侵的效果，木马和病毒是系统攻击最核心的两种手段
病毒，以破坏为主，是计算机系统中的一种恶意程序 木马，以窃取目标的信息资源为主 三：应用攻击 即应用代码层的攻击</description>
    </item>
    
    <item>
      <title>编码</title>
      <link>http://120.79.76.172:8381/post/%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/%E7%BC%96%E7%A0%81/</guid>
      <description>编码 编码是根据某一字符编码规则，将人类可读的字符串翻译为计算机中存储的原始字节
一：字符 计算机中的所有东西都是字节，磁盘上的文件是一系列字节，网络只传输字节，进入或退出任何程序的所有数据都是字节。计算机采用 8 个比特（bit）作为一个字节（byte），一个字节最多能表示 256 个字符
字母、数字、标点符号、汉字，回车，退格等等都是字符(Character)，单个或多个字符合起来就是字符串。人类使用文本，即在计算机上能看到的字符。而计算机使用字节序列，即存储介质中存储二进制比特流
字符与比特流之间的转换需要有一个统一的标准，否则就会出现乱码。不同字符集的标准不同，转换规则也不同。如使用 GBK 字符编码时，一个汉字占 2 个字节，使用 UTF-8 字符编码时，一个汉字占 3 个字节</description>
    </item>
    
    <item>
      <title>网络层次</title>
      <link>http://120.79.76.172:8381/post/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1/</link>
      <pubDate>Fri, 01 Oct 2021 15:40:18 +0000</pubDate>
      
      <guid>http://120.79.76.172:8381/post/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1/</guid>
      <description>分层是计算机技术最核心的一个思想。计算机科学中的任何问题，都可以通过加上一层逻辑层来解决
网络层次 [TOC]
为了解决 (兼容)不同设备之间的通信问题，需要一套通用的网络协议
一：分层 1.1 网络为什么分层 分层是为了解决复杂性，如果把所有的步骤都放到一个层次，那么这一层就会变得非常复杂，耦合度非常高，不容易理解</description>
    </item>
    
    
    
  </channel>
</rss>
